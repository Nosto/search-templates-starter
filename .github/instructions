Here is a list of instruction files that contain rules for modifying or creating new code.
These files are important for ensuring that the code is modified or created correctly.
Please make sure to follow the rules specified in these files when working with the codebase.
If you have not already read the file, use the `view` tool to acquire it.
Make sure to acquire the instructions before making any changes to the code.
| Pattern | File Path | Description |
| ------- | --------- | ----------- |
| **/*.ts,**/*.tsx | '.github/instructions_dir/typescript.instructions.md' | # TypeScript/JavaScript
- Use closures over classes
- Utilize type inference in return types, except for functions with multiple return statements
- Use utility types to derive types from constants
- Use const (and let) over var
- Use async/await instead of Promise chaining
- Use individual named exports over bulk exports
- Favor named exports over default exports
- Avoid using `any` in TypeScript; prefer specific types or `unknown`
- Use ES2020 level features and syntax conventions
- Favor functional programming style with array methods like map, filter, reduce, etc.
- **Avoid adding unnecessary comments** - only add comments when explicitly instructed or when complex logic needs explanation |
| test/**/* | '.github/instructions_dir/testing.instructions.md' | # Testing with Vitest
- Write unit tests using Vitest (see `test/utils/url.spec.ts` as example)
- Use `describe` and `it` for test structure
- Use `beforeEach` for setup, custom cleanup not needed (handled by global setup)
- Use `expect` for assertions
- Test environment is jsdom for DOM-related testing
- **Cleanup is automatic**: `@testing-library/preact` cleanup is handled globally via `test/vitest.setup.ts` - no need for individual `afterEach(() => { cleanup() })` calls in test files |
| **/*.stories.tsx | '.github/instructions_dir/storybook.instructions.md' | # Storybook Stories
- **ALWAYS** use actual components from the codebase in Storybook files instead of demo components
- Import the real component: `import ComponentName from "./ComponentName"`
- Set the Meta type to the actual component: `Meta<typeof ComponentName>`
- **Always include `tags: ["autodocs"]`** in the Meta configuration for automatic documentation generation
- **Skip argTypes usage** if they are related to component props - let Storybook infer types from TypeScript
- **Prefer typed object stories over function stories** - use `StoryObj<typeof Component>` approach consistently
- **Prefer args over render function** in storybook stories - use `args: {}` instead of `render: () => {}` when possible
- For components that depend on Nosto hooks/context that aren't available in Storybook:
  - Create a `MockedView` story that shows what the component would look like when properly integrated
  - Include documentation noting the component requires Nosto search context
  - Use inline styles for quick mockups rather than complex demo components
- Keep stories focused on demonstrating the actual component structure and behavior
- Avoid creating elaborate custom demo components that duplicate functionality
- **Never create functionally identical stories** - each story should demonstrate a unique state, behavior, or variation of the component |
| **/*.tsx | '.github/instructions_dir/preact.instructions.md' | # Preact Conventions
- Favor functional style react components and use the function syntax instead of lambda syntax
- Extract props definitions with more than 2 members
- Capitalize component names to clearly distinguish them from HTML elements
- Keep components small and focused, following the single-responsibility principle
- Use hooks (e.g. useState, useEffect) for state and lifecycle management in functional components
- Utilize memoization (useMemo, useCallback) to prevent unnecessary re-renders
- Avoid inline functions in JSX props to maintain performance and readability
- Ensure accessibility by using semantic HTML and proper aria attributes |